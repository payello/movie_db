{"version":3,"sources":["logo.svg","Movie.js","MoviesList.js","MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Movie","_ref","movie","react_default","a","createElement","Link","to","concat","id","Overdrive_min_default","Poster","src","poster_path","alt","title","styled","img","_templateObject","MoviesList","state","movies","fetch","res","json","this","setState","results","console","log","_context","t0","MovieGrid","map","src_Movie","key","PureComponent","div","MoviesList_templateObject","props","match","params","MovieWrapper","backdrop","backdrop_path","MovieInfo","release_date","overview","Component","MovieDetail_templateObject","_templateObject2","App","BrowserRouter","className","logo","Switch","Route","exact","path","component","MovieDetail","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gcCMxC,IAUeC,EARD,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OACZC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAE,IAAAC,OAAMN,EAAMO,KAClBN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWK,GAAIP,EAAMO,IACnBN,EAAAC,EAAAC,cAACM,EAAD,CAAQC,IAAG,GAAAJ,OALG,mCAKHA,OAAmBN,EAAMW,aAAeC,IAAKZ,EAAMa,WAavDJ,EAASK,IAAOC,IAAVC,qLCUJC,6MA7BbC,MAAQ,CACNC,OAAQ,gOAKYC,MAChB,4LADIC,kBAIeA,EAAIC,cAAnBH,SACNI,KAAKC,SAAS,CACZL,OAAQA,EAAOM,4DAIjBC,QAAQC,IAARC,EAAAC,iJAKF,OACE5B,EAAAC,EAAAC,cAAC2B,EAAD,KACGP,KAAKL,MAAMC,OAAOY,IAAI,SAAA/B,GAAK,OAAKC,EAAAC,EAAAC,cAAC6B,EAAD,CAAOC,IAAKjC,EAAMO,GAAIP,MAAOA,cAxB7CkC,iBAgCnBJ,EAAYhB,IAAOqB,IAAVC,yaC9Bf,IAmDenB,6MA/CbC,MAAQ,CACNlB,MAAO,gOAKaoB,MAAK,sCAAAd,OACiBiB,KAAKc,MAAMC,MAAMC,OAAOhC,GADzC,2EAAjBc,kBAIcA,EAAIC,cAAlBtB,SACNuB,KAAKC,SAAS,CACZxB,4DAIF0B,QAAQC,IAARC,EAAAC,iJAIK,IACC7B,EAAUuB,KAAKL,MAAflB,MAER,OACEC,EAAAC,EAAAC,cAACqC,EAAD,CAAcC,SAAQ,GAAAnC,OA3BN,oCA2BMA,OAAqBN,EAAM0C,gBAC/CzC,EAAAC,EAAAC,cAACwC,EAAD,KACE1C,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWK,GAAIP,EAAMO,IACrBN,EAAAC,EAAAC,cAACM,EAAD,CAAQC,IAAG,GAAAJ,OA/BD,mCA+BCA,OAAmBN,EAAMW,aAAeC,IAAKZ,EAAMa,SAE9DZ,EAAAC,EAAAC,cAAA,WAQEF,EAAAC,EAAAC,cAAA,UAAKH,EAAMa,OACXZ,EAAAC,EAAAC,cAAA,UAAKH,EAAM4C,cACX3C,EAAAC,EAAAC,cAAA,SAAIH,EAAM6C,oBAxCGC,aAkDnBN,EAAe1B,IAAOqB,IAAVY,IAGA,SAAAV,GAAK,OAAIA,EAAMI,WAI3BE,EAAY7B,IAAOqB,IAAVa,KCrCAC,EAhBH,kBACVhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACEjD,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,OACblD,EAAAC,EAAAC,cAAA,UAAQgD,UAAU,cAChBlD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,KACPJ,EAAAC,EAAAC,cAAA,OAAKO,IAAK0C,IAAMD,UAAU,WAAWvC,IAAI,WAG7CX,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KACEpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxC,IACjChB,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWC,QCXxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxB,MACvB,2DCZNyB,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8d2ff3ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ff9a163f.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Overdrive from 'react-overdrive';\n\nconst POSTER_PATH = 'https://image.tmdb.org/t/p/w154';\n\nconst Movie = ({ movie }) => (\n  <Link to={`/${movie.id}`}>\n    <Overdrive id={movie.id}>\n      <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n    </Overdrive>\n  </Link>\n);\n\nexport default Movie;\n\nMovie.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const Poster = styled.img`\n  box-shadow: 0 0 35px black;\n`;\n","import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport Movie from './Movie';\n\nclass MoviesList extends PureComponent {\n  state = {\n    movies: [],\n  };\n\n  async componentDidMount() {\n    try {\n      const res = await fetch(\n        'https://api.themoviedb.org/3/discover/movie?api_key=b63b452727b983876f9e6a3301023de8&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1',\n      );\n\n      const movies = await res.json();\n      this.setState({\n        movies: movies.results,\n      });\n    } catch (e) {\n      // eslint-disable-line\n      console.log(e);\n    }\n  }\n\n  render() {\n    return (\n      <MovieGrid>\n        {this.state.movies.map(movie => (<Movie key={movie.id} movie={movie} />))}\n      </MovieGrid>\n    );\n  }\n}\n\nexport default MoviesList;\n\nconst MovieGrid = styled.div`\n  display: grid;\n  padding: 1rem;\n  grid-template-columns: repeat(6, 1fr);\n  grid-row-gap: 1rem;\n`;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Overdrive from 'react-overdrive';\n\nimport { Poster } from './Movie';\n\nconst POSTER_PATH = 'https://image.tmdb.org/t/p/w154';\nconst BACKDROP_PATH = 'https://image.tmdb.org/t/p/w1280';\n\nclass MoviesList extends Component {\n  state = {\n    movie: {},\n  };\n\n  async componentDidMount() {\n    try {\n      const res = await fetch(\n        `https://api.themoviedb.org/3/movie/${this.props.match.params.id}?api_key=b63b452727b983876f9e6a3301023de8&language=en-US`,\n      );\n\n      const movie = await res.json();\n      this.setState({\n        movie,\n      });\n    } catch (e) {\n      // eslint-disable-line\n      console.log(e);\n    }\n  }\n\n  render() {\n    const { movie } = this.state;\n\n    return (\n      <MovieWrapper backdrop={`${BACKDROP_PATH}${movie.backdrop_path}`}>\n        <MovieInfo>\n          <Overdrive id={movie.id}>\n          <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n          </Overdrive>\n          <div>\n            {/* {this.state.movie.title ? (\n              <h1>{movie.title}</h1>\n              <h3>{movie.release_date}</h3>\n              <p>{movie.overview}</p>\n            ) : (\n              <h1>Hi </h1>\n            )} */}\n            <h1>{movie.title}</h1>\n            <h3>{movie.release_date}</h3>\n            <p>{movie.overview}</p>\n          </div>\n        </MovieInfo>\n      </MovieWrapper>\n    );\n  }\n}\n\nexport default MoviesList;\n\nconst MovieWrapper = styled.div`\nposition: relative;\npadding-top: 50vh;\nbackground: url(${props => props.backdrop}) no-repeat;\nbackground-size: cover;\n`;\n\nconst MovieInfo = styled.div`\n  background: white;\n  text-align: left;\n  padding: 2rem 10%;\n  display: flex;\n  > div {\n    margin-left: 20px;\n  }\n  img {\n    position: relative;\n    top: -5rem;\n  }\n`;\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link,\n} from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport MoviesList from './MoviesList';\nimport MovieDetail from './MovieDetail';\n\nconst App = () => (\n  <Router>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Link to=\"/\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </Link>\n      </header>\n      <Switch>\n        <Route exact path=\"/\" component={MoviesList} />\n        <Route exact path=\"/:id\" component={MovieDetail} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}